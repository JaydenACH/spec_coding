# Generated by Django 4.2.7 on 2025-07-24 14:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        help_text="Original name of the uploaded file",
                        max_length=255,
                        verbose_name="original filename",
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        help_text="Path to the stored file",
                        max_length=500,
                        verbose_name="file path",
                    ),
                ),
                (
                    "content_type",
                    models.CharField(
                        help_text="MIME type of the file",
                        max_length=100,
                        verbose_name="content type",
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("document", "Document"),
                            ("audio", "Audio"),
                            ("video", "Video"),
                            ("archive", "Archive"),
                            ("other", "Other"),
                        ],
                        help_text="Categorized file type",
                        max_length=10,
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        help_text="File size in bytes", verbose_name="file size"
                    ),
                ),
                (
                    "file_hash",
                    models.CharField(
                        help_text="SHA-256 hash of file content for deduplication",
                        max_length=64,
                        unique=True,
                        verbose_name="file hash",
                    ),
                ),
                (
                    "virus_scan_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("clean", "Clean"),
                            ("infected", "Infected"),
                            ("failed", "Scan Failed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        help_text="Status of virus scan",
                        max_length=10,
                    ),
                ),
                (
                    "virus_scan_result",
                    models.TextField(
                        blank=True,
                        help_text="Detailed virus scan result",
                        verbose_name="virus scan result",
                    ),
                ),
                (
                    "virus_scanned_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When virus scan was completed",
                        null=True,
                        verbose_name="virus scanned at",
                    ),
                ),
                (
                    "upload_source",
                    models.CharField(
                        choices=[
                            ("user_upload", "User Upload"),
                            ("message_attachment", "Message Attachment"),
                            ("respond_io", "Respond.IO"),
                            ("system", "System"),
                        ],
                        default="user_upload",
                        help_text="Source of the file upload",
                        max_length=20,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether file can be accessed without authentication",
                        verbose_name="public access",
                    ),
                ),
                (
                    "access_level",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("team", "Team"),
                            ("organization", "Organization"),
                            ("public", "Public"),
                        ],
                        default="private",
                        help_text="Access level for the file",
                        max_length=20,
                        verbose_name="access level",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of the file",
                        verbose_name="description",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags associated with the file",
                        verbose_name="tags",
                    ),
                ),
                (
                    "width",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Width in pixels for images/videos",
                        null=True,
                        verbose_name="width",
                    ),
                ),
                (
                    "height",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Height in pixels for images/videos",
                        null=True,
                        verbose_name="height",
                    ),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Duration in seconds for audio/video files",
                        null=True,
                        verbose_name="duration",
                    ),
                ),
                (
                    "thumbnail_path",
                    models.CharField(
                        blank=True,
                        help_text="Path to thumbnail image",
                        max_length=500,
                        verbose_name="thumbnail path",
                    ),
                ),
                (
                    "has_preview",
                    models.BooleanField(
                        default=False,
                        help_text="Whether file has a preview/thumbnail",
                        verbose_name="has preview",
                    ),
                ),
                (
                    "respond_io_file_id",
                    models.CharField(
                        blank=True,
                        help_text="Corresponding Respond.IO file ID",
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="Respond.IO File ID",
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        blank=True,
                        help_text="External URL if file is hosted elsewhere",
                        verbose_name="external URL",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "last_accessed",
                    models.DateTimeField(
                        blank=True,
                        help_text="When file was last accessed",
                        null=True,
                        verbose_name="last accessed",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When file should be automatically deleted",
                        null=True,
                        verbose_name="expires at",
                    ),
                ),
                (
                    "retention_policy",
                    models.CharField(
                        blank=True,
                        help_text="Retention policy identifier",
                        max_length=50,
                        verbose_name="retention policy",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who uploaded the file",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_files",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "File",
                "verbose_name_plural": "Files",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FileShare",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "shared_with_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("basic_user", "Basic Users"),
                            ("manager", "Managers"),
                            ("system_admin", "System Admins"),
                        ],
                        help_text="Role group file is shared with",
                        max_length=20,
                        verbose_name="shared with role",
                    ),
                ),
                (
                    "share_type",
                    models.CharField(
                        choices=[
                            ("view", "View Only"),
                            ("download", "Download"),
                            ("edit", "Edit"),
                        ],
                        default="view",
                        help_text="Type of access granted",
                        max_length=10,
                    ),
                ),
                (
                    "can_reshare",
                    models.BooleanField(
                        default=False,
                        help_text="Whether recipient can share with others",
                        verbose_name="can reshare",
                    ),
                ),
                (
                    "share_message",
                    models.TextField(
                        blank=True,
                        help_text="Optional message when sharing",
                        verbose_name="share message",
                    ),
                ),
                (
                    "requires_password",
                    models.BooleanField(
                        default=False,
                        help_text="Whether access requires a password",
                        verbose_name="requires password",
                    ),
                ),
                (
                    "access_password",
                    models.CharField(
                        blank=True,
                        help_text="Password for accessing shared file",
                        max_length=128,
                        verbose_name="access password",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When share access expires",
                        null=True,
                        verbose_name="expires at",
                    ),
                ),
                (
                    "max_downloads",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of downloads allowed",
                        null=True,
                        verbose_name="max downloads",
                    ),
                ),
                (
                    "download_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times file has been downloaded",
                        verbose_name="download count",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether share is currently active",
                        verbose_name="active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "last_accessed",
                    models.DateTimeField(
                        blank=True,
                        help_text="When share was last accessed",
                        null=True,
                        verbose_name="last accessed",
                    ),
                ),
                (
                    "file",
                    models.ForeignKey(
                        help_text="File being shared",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shares",
                        to="files.file",
                    ),
                ),
                (
                    "shared_by",
                    models.ForeignKey(
                        help_text="User who created the share",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_file_shares",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shared_with_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific user file is shared with",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_file_shares",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "File Share",
                "verbose_name_plural": "File Shares",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FileDownloadLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="IP address of the downloader",
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="Browser user agent string",
                        verbose_name="user agent",
                    ),
                ),
                (
                    "download_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether download was completed successfully",
                        verbose_name="download completed",
                    ),
                ),
                (
                    "bytes_transferred",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of bytes transferred",
                        verbose_name="bytes transferred",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="started at"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When download was completed",
                        null=True,
                        verbose_name="completed at",
                    ),
                ),
                (
                    "downloaded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who downloaded the file",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="file_downloads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "file",
                    models.ForeignKey(
                        help_text="File that was downloaded",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="download_logs",
                        to="files.file",
                    ),
                ),
                (
                    "file_share",
                    models.ForeignKey(
                        blank=True,
                        help_text="File share used for download",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="download_logs",
                        to="files.fileshare",
                    ),
                ),
            ],
            options={
                "verbose_name": "File Download Log",
                "verbose_name_plural": "File Download Logs",
                "ordering": ["-started_at"],
            },
        ),
        migrations.AddIndex(
            model_name="fileshare",
            index=models.Index(
                fields=["file", "is_active"], name="files_files_file_id_8707b8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fileshare",
            index=models.Index(
                fields=["shared_with_user", "is_active"],
                name="files_files_shared__08d562_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="fileshare",
            index=models.Index(
                fields=["shared_by", "created_at"],
                name="files_files_shared__ae7cea_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="fileshare",
            index=models.Index(
                fields=["expires_at"], name="files_files_expires_b47393_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="filedownloadlog",
            index=models.Index(
                fields=["file", "started_at"], name="files_filed_file_id_2b5bfa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="filedownloadlog",
            index=models.Index(
                fields=["downloaded_by", "started_at"],
                name="files_filed_downloa_5e84d2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="filedownloadlog",
            index=models.Index(
                fields=["ip_address", "started_at"],
                name="files_filed_ip_addr_408a53_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="filedownloadlog",
            index=models.Index(
                fields=["download_completed"], name="files_filed_downloa_722ac2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(
                fields=["uploaded_by", "created_at"],
                name="files_file_uploade_abf04e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(
                fields=["file_type", "created_at"], name="files_file_file_ty_30c49b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(
                fields=["virus_scan_status"], name="files_file_virus_s_fd7a91_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(
                fields=["file_hash"], name="files_file_file_ha_868749_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(
                fields=["respond_io_file_id"], name="files_file_respond_7a8bf4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(
                fields=["expires_at"], name="files_file_expires_9245a2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(
                fields=["access_level"], name="files_file_access__33a854_idx"
            ),
        ),
    ]
