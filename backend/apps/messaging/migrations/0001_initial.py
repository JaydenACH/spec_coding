# Generated by Django 4.2.7 on 2025-07-24 14:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("customers", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("image", "Image"),
                            ("document", "Document"),
                            ("audio", "Audio"),
                            ("video", "Video"),
                            ("location", "Location"),
                            ("contact", "Contact"),
                            ("sticker", "Sticker"),
                            ("system", "System Message"),
                        ],
                        default="text",
                        help_text="Type of message content",
                        max_length=15,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Message text content", verbose_name="content"
                    ),
                ),
                (
                    "sender_type",
                    models.CharField(
                        choices=[
                            ("customer", "Customer"),
                            ("user", "User (Internal)"),
                            ("system", "System"),
                        ],
                        help_text="Type of message sender",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("read", "Read"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        help_text="Message delivery status",
                        max_length=10,
                    ),
                ),
                (
                    "read_by_user",
                    models.BooleanField(
                        default=False,
                        help_text="Whether assigned user has read this message",
                        verbose_name="read by user",
                    ),
                ),
                (
                    "read_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the message was marked as read",
                        null=True,
                        verbose_name="read at",
                    ),
                ),
                (
                    "respond_io_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Corresponding Respond.IO message ID",
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="Respond.IO Message ID",
                    ),
                ),
                (
                    "media_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to media content (images, videos, etc.)",
                        verbose_name="media URL",
                    ),
                ),
                (
                    "thumbnail_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to media thumbnail",
                        verbose_name="thumbnail URL",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Latitude for location messages",
                        max_digits=10,
                        null=True,
                        verbose_name="latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Longitude for location messages",
                        max_digits=11,
                        null=True,
                        verbose_name="longitude",
                    ),
                ),
                (
                    "location_name",
                    models.CharField(
                        blank=True,
                        help_text="Named location for location messages",
                        max_length=200,
                        verbose_name="location name",
                    ),
                ),
                (
                    "contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Contact name for contact messages",
                        max_length=100,
                        verbose_name="contact name",
                    ),
                ),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="Contact phone for contact messages",
                        max_length=20,
                        verbose_name="contact phone",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When message was actually sent to Respond.IO",
                        null=True,
                        verbose_name="sent at",
                    ),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When message was last edited",
                        null=True,
                        verbose_name="edited at",
                    ),
                ),
                (
                    "edit_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times message has been edited",
                        verbose_name="edit count",
                    ),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        help_text="Conversation this message belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="customers.conversation",
                    ),
                ),
                (
                    "forwarded_from",
                    models.ForeignKey(
                        blank=True,
                        help_text="Original message if this is forwarded",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="forwards",
                        to="messaging.message",
                    ),
                ),
                (
                    "reply_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Message this is replying to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="replies",
                        to="messaging.message",
                    ),
                ),
                (
                    "sender_customer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer who sent this message (if external)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_messages",
                        to="customers.customer",
                    ),
                ),
                (
                    "sender_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who sent this message (if internal)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Message",
                "verbose_name_plural": "Messages",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="InternalComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Comment text content", verbose_name="content"
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        help_text="Comment priority level",
                        max_length=10,
                    ),
                ),
                (
                    "is_private",
                    models.BooleanField(
                        default=False,
                        help_text="Whether comment is visible only to managers/admins",
                        verbose_name="private comment",
                    ),
                ),
                (
                    "notify_assigned_user",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to notify the assigned user",
                        verbose_name="notify assigned user",
                    ),
                ),
                (
                    "notify_managers",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to notify all managers",
                        verbose_name="notify managers",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When comment was last edited",
                        null=True,
                        verbose_name="edited at",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="User who wrote this comment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="internal_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        help_text="Conversation this comment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="internal_comments",
                        to="customers.conversation",
                    ),
                ),
                (
                    "reply_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Comment this is replying to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="replies",
                        to="messaging.internalcomment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Internal Comment",
                "verbose_name_plural": "Internal Comments",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="CommentMention",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "position_start",
                    models.PositiveIntegerField(
                        help_text="Start position of mention in comment text",
                        verbose_name="position start",
                    ),
                ),
                (
                    "position_end",
                    models.PositiveIntegerField(
                        help_text="End position of mention in comment text",
                        verbose_name="position end",
                    ),
                ),
                (
                    "notification_sent",
                    models.BooleanField(
                        default=False,
                        help_text="Whether notification was sent to mentioned user",
                        verbose_name="notification sent",
                    ),
                ),
                (
                    "acknowledged",
                    models.BooleanField(
                        default=False,
                        help_text="Whether mentioned user has acknowledged the mention",
                        verbose_name="acknowledged",
                    ),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When mention was acknowledged",
                        null=True,
                        verbose_name="acknowledged at",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        help_text="Comment containing the mention",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentions",
                        to="messaging.internalcomment",
                    ),
                ),
                (
                    "mentioned_by",
                    models.ForeignKey(
                        help_text="User who created the mention",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_mentions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "mentioned_user",
                    models.ForeignKey(
                        help_text="User who was mentioned",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_mentions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment Mention",
                "verbose_name_plural": "Comment Mentions",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="TypingIndicator",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_typing",
                    models.BooleanField(
                        default=True,
                        help_text="Whether user is currently typing",
                        verbose_name="is typing",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="started typing at"
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(auto_now=True, verbose_name="last activity"),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        help_text="Conversation where typing is happening",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="typing_indicators",
                        to="customers.conversation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who is typing",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="typing_indicators",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Typing Indicator",
                "verbose_name_plural": "Typing Indicators",
                "indexes": [
                    models.Index(
                        fields=["conversation", "is_typing"],
                        name="messaging_t_convers_f60154_idx",
                    ),
                    models.Index(
                        fields=["last_activity"], name="messaging_t_last_ac_fba567_idx"
                    ),
                ],
                "unique_together": {("conversation", "user")},
            },
        ),
        migrations.CreateModel(
            name="MessageAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "file_name",
                    models.CharField(
                        help_text="Original file name",
                        max_length=255,
                        verbose_name="file name",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        help_text="File size in bytes", verbose_name="file size"
                    ),
                ),
                (
                    "content_type",
                    models.CharField(
                        help_text="MIME type of the file",
                        max_length=100,
                        verbose_name="content type",
                    ),
                ),
                (
                    "attachment_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("document", "Document"),
                            ("audio", "Audio"),
                            ("video", "Video"),
                            ("other", "Other"),
                        ],
                        help_text="Type of attachment",
                        max_length=10,
                    ),
                ),
                (
                    "file_url",
                    models.URLField(
                        help_text="URL to the actual file", verbose_name="file URL"
                    ),
                ),
                (
                    "thumbnail_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to file thumbnail (for images/videos)",
                        verbose_name="thumbnail URL",
                    ),
                ),
                (
                    "respond_io_attachment_id",
                    models.CharField(
                        blank=True,
                        help_text="Corresponding Respond.IO attachment ID",
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="Respond.IO Attachment ID",
                    ),
                ),
                (
                    "is_virus_scanned",
                    models.BooleanField(
                        default=False,
                        help_text="Whether file has been scanned for viruses",
                        verbose_name="virus scanned",
                    ),
                ),
                (
                    "virus_scan_result",
                    models.CharField(
                        blank=True,
                        help_text="Result of virus scan (clean, infected, etc.)",
                        max_length=50,
                        verbose_name="virus scan result",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "message",
                    models.ForeignKey(
                        help_text="Message this attachment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="messaging.message",
                    ),
                ),
            ],
            options={
                "verbose_name": "Message Attachment",
                "verbose_name_plural": "Message Attachments",
                "ordering": ["created_at"],
                "indexes": [
                    models.Index(
                        fields=["message", "attachment_type"],
                        name="messaging_m_message_6ac2ac_idx",
                    ),
                    models.Index(
                        fields=["respond_io_attachment_id"],
                        name="messaging_m_respond_aa3ac2_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="messaging_m_created_94952e_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["conversation", "created_at"],
                name="messaging_m_convers_7bc91b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["sender_type", "sender_user"],
                name="messaging_m_sender__c88947_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["message_type", "status"], name="messaging_m_message_745440_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["respond_io_message_id"], name="messaging_m_respond_498492_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["read_by_user", "created_at"],
                name="messaging_m_read_by_77c0d4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["status", "created_at"], name="messaging_m_status_17edaf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="internalcomment",
            index=models.Index(
                fields=["conversation", "created_at"],
                name="messaging_i_convers_78e59f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="internalcomment",
            index=models.Index(
                fields=["author", "created_at"], name="messaging_i_author__8c2574_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="internalcomment",
            index=models.Index(
                fields=["priority", "created_at"], name="messaging_i_priorit_ac8b87_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="internalcomment",
            index=models.Index(
                fields=["is_private"], name="messaging_i_is_priv_3513c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="commentmention",
            index=models.Index(
                fields=["mentioned_user", "acknowledged"],
                name="messaging_c_mention_df013d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="commentmention",
            index=models.Index(
                fields=["comment", "mentioned_user"],
                name="messaging_c_comment_c053d4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="commentmention",
            index=models.Index(
                fields=["created_at"], name="messaging_c_created_17e7b0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="commentmention",
            unique_together={("comment", "mentioned_user", "position_start")},
        ),
    ]
